{"version":3,"file":"vmath.js","sources":["../lib/utils.js","../lib/vec2.js"],"sourcesContent":["const _d2r = Math.PI / 180.0;\nconst _r2d = 180.0 / Math.PI;\n\n/**\n * @property {number} EPSILON\n */\nexport const EPSILON = 0.000001;\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value by given maxDiff\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @param {Number} maxDiff Maximum difference.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function approx(a, b, maxDiff) {\n  maxDiff = maxDiff || EPSILON;\n  return Math.abs(a - b) <= maxDiff;\n}\n\n/**\n * Clamps a value between a minimum float and maximum float value.\n *\n * @method clamp\n * @param {number} val\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nexport function clamp(val, min, max) {\n  return val < min ? min : val > max ? max : val;\n}\n\n/**\n * Clamps a value between 0 and 1.\n *\n * @method clamp01\n * @param {number} val\n * @return {number}\n */\nexport function clamp01(val) {\n  return val < 0 ? 0 : val > 1 ? 1 : val;\n}\n\n/**\n * Returns true if argument is a power-of-two and false otherwise.\n *\n * @method powof2\n * @param {number} x Number to check for power-of-two property.\n * @returns {boolean} true if power-of-two and false otherwise.\n */\nexport function powof2(x) {\n  return ((x !== 0) && !(x & (x - 1)));\n}\n\n/**\n * @method lerp\n * @param {number} from\n * @param {number} to\n * @param {number} ratio - the interpolation coefficient\n * @return {number}\n */\nexport function lerp(from, to, ratio) {\n  return from + (to - from) * ratio;\n}\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} a Angle in Degrees\n*/\nexport function toRadian(a) {\n  return a * _d2r;\n}\n\n/**\n* Convert Radian To Degree\n*\n* @param {Number} a Angle in Radian\n*/\nexport function toDegree(a) {\n  return a * _r2d;\n}\n\n/**\n* @method random\n*/\nexport const random = Math.random;\n\n/**\n * Returns a floating-point random number between min (inclusive) and max (exclusive).\n *\n * @method randomRange\n * @param {number} min\n * @param {number} max\n * @return {number} the random number\n */\nexport function randomRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (exclusive).\n *\n * @method randomRangeInt\n * @param {number} min\n * @param {number} max\n * @return {number} the random integer\n */\nexport function randomRangeInt(min, max) {\n  return Math.floor(this.randomRange(min, max));\n}","import { EPSILON, random } from './utils';\n\nclass _vec2 {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nlet vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function () {\n  return new _vec2(0,0);\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function (a) {\n  return new _vec2(a.x, a.y);\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function (x, y) {\n  return new _vec2(x,y);\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function (out, a) {\n  out.x = a.x;\n  out.y = a.y;\n  return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function (out, x, y) {\n  out.x = x;\n  out.y = y;\n  return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function (out, a, b) {\n  out.x = a.x + b.x;\n  out.y = a.y + b.y;\n  return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function (out, a, b) {\n  out.x = a.x - b.x;\n  out.y = a.y - b.y;\n  return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function (out, a, b) {\n  out.x = a.x * b.x;\n  out.y = a.y * b.y;\n  return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function (out, a, b) {\n  out.x = a.x / b.x;\n  out.y = a.y / b.y;\n  return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n  out.x = Math.ceil(a.x);\n  out.y = Math.ceil(a.y);\n  return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n  out.x = Math.floor(a.x);\n  out.y = Math.floor(a.y);\n  return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function (out, a, b) {\n  out.x = Math.min(a.x, b.x);\n  out.y = Math.min(a.y, b.y);\n  return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function (out, a, b) {\n  out.x = Math.max(a.x, b.x);\n  out.y = Math.max(a.y, b.y);\n  return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n  out.x = Math.round(a.x);\n  out.y = Math.round(a.y);\n  return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function (out, a, b) {\n  out.x = a.x * b;\n  out.y = a.y * b;\n  return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function (out, a, b, scale) {\n  out.x = a.x + (b.x * scale);\n  out.y = a.y + (b.y * scale);\n  return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function (a, b) {\n  let x = b.x - a.x,\n    y = b.y - a.y;\n  return Math.sqrt(x * x + y * y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function (a, b) {\n  let x = b.x - a.x,\n    y = b.y - a.y;\n  return x * x + y * y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n  let x = a.x,\n    y = a.y;\n  return Math.sqrt(x * x + y * y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n  let x = a.x,\n    y = a.y;\n  return x * x + y * y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function (out, a) {\n  out.x = -a.x;\n  out.y = -a.y;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function (out, a) {\n  out.x = 1.0 / a.x;\n  out.y = 1.0 / a.y;\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2 safely\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverseSafe = function (out, a) {\n  let x = a.x,\n    y = a.y;\n\n  if (Math.abs(x) < EPSILON) {\n    out.x = 0;\n  } else {\n    out.x = 1.0 / x;\n  }\n\n  if (Math.abs(y) < EPSILON) {\n    out.y = 0;\n  } else {\n    out.y = 1.0 / a.y;\n  }\n\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function (out, a) {\n  let x = a.x,\n    y = a.y;\n  let len = x * x + y * y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out.x = a.x * len;\n    out.y = a.y * len;\n  }\n  return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function (out, a, b) {\n  let z = a.x * b.y - a.y * b.x;\n  out.x = out.y = 0;\n  out[2] = z;\n  return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n  let ax = a.x,\n    ay = a.y;\n  out.x = ax + t * (b.x - ax);\n  out.y = ay + t * (b.y - ay);\n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n  scale = scale || 1.0;\n  let r = random() * 2.0 * Math.PI;\n  out.x = Math.cos(r) * scale;\n  out.y = Math.sin(r) * scale;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function (out, a, m) {\n  let x = a.x,\n    y = a.y;\n  out.x = m.x * x + m[2] * y;\n  out.y = m.y * x + m[3] * y;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function (out, a, m) {\n  let x = a.x,\n    y = a.y;\n  out.x = m.x * x + m[2] * y + m[4];\n  out.y = m.y * x + m[3] * y + m[5];\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function (out, a, m) {\n  let x = a.x,\n    y = a.y;\n  out.x = m.x * x + m[3] * y + m[6];\n  out.y = m.y * x + m[4] * y + m[7];\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function (out, a, m) {\n  let x = a.x,\n    y = a.y;\n  out.x = m.x * x + m[4] * y + m[12];\n  out.y = m.y * x + m[5] * y + m[13];\n  return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function () {\n  let vec = vec2.create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i, l;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec.x = a[i]; vec.y = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec.x; a[i + 1] = vec.y;\n    }\n\n    return a;\n  };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n  return 'vec2(' + a.x + ', ' + a.y + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n  return a.x === b.x && a.y === b.y;\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n  let a0 = a.x, a1 = a.y;\n  let b0 = b.x, b1 = b.y;\n  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nexport default vec2;\n"],"names":[],"mappings":"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"}